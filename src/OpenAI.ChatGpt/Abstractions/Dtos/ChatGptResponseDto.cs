namespace OpenAI.ChatGPT.Abstractions.Dtos;

/// <summary>
/// Represents the response DTO from the ChatGPT service, including the response data and any potential errors.
/// </summary>
public class ChatGptResponseDto
{
    /// <summary>
    /// Initializes a new instance of the <see cref="ChatGptResponseDto"/> class.
    /// </summary>
    /// <param name="document">The response document from ChatGPT.</param>
    /// <param name="exception">The exception that occurred during the request, if any.</param>
    public ChatGptResponseDto(ChatGptRootResponse? document, Exception? exception = null)
    {
        Response = document;
        Exception = exception;
    }

    /// <summary>
    /// Gets or sets the response document from the ChatGPT API.
    /// </summary>
    public ChatGptRootResponse? Response { get; set; }

    /// <summary>
    /// Gets a value indicating whether the response contains an error.
    /// </summary>
    public bool IsError => Response == null || Exception != null;

    /// <summary>
    /// Gets or sets the exception that occurred during the request, if any.
    /// </summary>
    public Exception? Exception { get; set; }
}

/// <summary>
/// Represents the root response from the ChatGPT API.
/// </summary>
public class ChatGptRootResponse
{
    /// <summary>
    /// Gets or sets the unique identifier of the response.
    /// </summary>
    public string Id { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the type of object returned (e.g., "text_completion").
    /// </summary>
    public string Object { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the creation timestamp of the response.
    /// </summary>
    public long Created { get; set; }

    /// <summary>
    /// Gets or sets the list of choices generated by the ChatGPT model.
    /// </summary>
    public List<Choice> Choices { get; set; } = new();

    /// <summary>
    /// Gets or sets the usage information for the request (token counts).
    /// </summary>
    public Usage? Usage { get; set; }
}

/// <summary>
/// Represents a choice in the response from the ChatGPT API.
/// </summary>
public class Choice
{
    /// <summary>
    /// Gets or sets the text of the choice returned by the ChatGPT model.
    /// </summary>
    public string Text { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the index of the choice in the list of choices.
    /// </summary>
    public int Index { get; set; }

    /// <summary>
    /// Gets or sets the log probabilities of the tokens in the response, if available.
    /// </summary>
    public object? Logprobs { get; set; }

    /// <summary>
    /// Gets or sets the reason why the completion finished (e.g., "stop", "length").
    /// </summary>
    public string FinishReason { get; set; } = string.Empty;
}

/// <summary>
/// Represents the usage details of the ChatGPT API request, including token counts.
/// </summary>
public class Usage
{
    /// <summary>
    /// Gets or sets the number of tokens used in the prompt.
    /// </summary>
    public int PromptTokens { get; set; }

    /// <summary>
    /// Gets or sets the number of tokens used in the completion.
    /// </summary>
    public int CompletionTokens { get; set; }

    /// <summary>
    /// Gets or sets the total number of tokens used in the request.
    /// </summary>
    public int TotalTokens { get; set; }
}